// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String
  email         String  @unique
  password      String
  emailVerified Boolean @default(false)
  image         String?
  zaps          Zap[]
  
  accounts Account[]
  sessions Session[]
}

model Zap {
  id        String   @id @default(uuid())
  triggerId String
  userId    String
  trigger   Trigger?
  actions   Action[]
  zapRuns   ZapRun[]
  user      User     @relation(fields: [userId], references: [id])
}

model Trigger {
  id        String           @id @default(uuid())
  zapId     String           @unique
  triggerId String
  type      AvailableTrigger @relation(fields: [triggerId], references: [id])
  zap       Zap              @relation(fields: [zapId], references: [id])
}

model Action {
  id           String          @id @default(uuid())
  zapId        String
  zap          Zap             @relation(fields: [zapId], references: [id])
  actionId     String
  type         AvailableAction @relation(fields: [actionId], references: [id])
  sortingOrder Int             @default(0)
}

model AvailableAction {
  id      String   @id @default(uuid())
  name    String
  image   String
  actions Action[]
}

model AvailableTrigger {
  id       String    @id @default(uuid())
  name     String
  image    String
  triggers Trigger[]
}

model ZapRun {
  id           String        @id @default(uuid())
  zapId        String
  metadata     Json
  zap          Zap           @relation(fields: [zapId], references: [id])
  zapRunOutbox ZapRunOutbox?
}

model ZapRunOutbox {
  id       String @id @default(uuid())
  zapRunId String @unique
  zapRun   ZapRun @relation(fields: [zapRunId], references: [id])
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  email   String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}